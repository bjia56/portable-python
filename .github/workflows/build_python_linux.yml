name: Build Python

on:
  workflow_call:
    inputs:
      python_version:
        required: true
        type: string
      arch:
        required: true
        type: string

env:
  image_map: '{"x86_64": "debian:buster", "aarch64": "debian:buster", "armv7l": "debian:buster"}'
  platform_map: '{"x86_64": "linux/amd64", "aarch64": "linux/arm64/v8", "armv7l": "linux/arm/v7"}'

jobs:
  build_linux_zig:
    if: ${{ !startsWith(inputs.python_version, '3.8') && inputs.arch != 'armv7l' }}
    name: Linux (Zig) ${{ inputs.python_version }} ${{ inputs.arch }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: |
          sudo ./scripts/build_linux_zig.sh ${{ inputs.arch }} ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: build-python
          path: ./*python*.tar.gz

  build_linux:
    if: ${{ startsWith(inputs.python_version, '3.8') || inputs.arch == 'armv7l' }}
    name: Linux (Docker) ${{ inputs.python_version }} ${{ inputs.arch }}
    runs-on: ubuntu-latest

    steps:
      - name: Parse image
        id: parse_image
        run: |
          IMAGE=$(echo ${{ toJSON(env.image_map) }} | jq -r '.["${{ inputs.arch }}"]')
          echo "::set-output name=image::$IMAGE"

      - name: Parse platform
        id: parse_platform
        run: |
          PLATFORM=$(echo ${{ toJSON(env.platform_map) }} | jq -r '.["${{ inputs.arch }}"]')
          echo "::set-output name=platform::$PLATFORM"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: ${{ inputs.arch != 'x86_64' }}

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.parse_image.outputs.image }}
          options: -v ${{ github.workspace }}:/work --workdir /tmp --platform ${{ steps.parse_platform.outputs.platform }}
          run: |
            set -e
            /work/scripts/build_linux.sh ${{ inputs.arch }} ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: build-python
          path: ./*python*.tar.gz

      - name: Test python in clean environment
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.parse_image.outputs.image }}
          options: -v ${{ github.workspace }}:/work --workdir /tmp --platform ${{ steps.parse_platform.outputs.platform }}
          run: |
            set -e
            apt update
            apt install -y unzip

            cp /work/python*.zip .
            unzip ./python*.zip

            cd python-${{ inputs.python_version }}-linux-${{ inputs.arch }}
            chmod +x ./bin/python
            ldd -v -r ./bin/python || true
            ./bin/python --version

            # make tests nonfatal for now
            # ./bin/python -m test || true