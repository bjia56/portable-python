name: Build Python

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
      platforms:
        required: true
        type: string
        default: "linux-x86_64,linux-aarch64,linux-i386,linux-arm,linux-riscv64,macos,windows,freebsd13-x86_64,freebsd14-x86_64"
      buildsystem_branch:
        required: false
        type: string
        default: "portable-python"
      run_tests:
        required: false
        type: boolean
      debug:
        required: false
        type: boolean
      debug_interactive:
        required: false
        type: boolean
      verbose:
        required: false
        type: boolean
  workflow_call:
    inputs:
      python_version:
        required: true
        type: string
      platforms:
        required: true
        type: string
      buildsystem_branch:
        required: false
        type: string
      run_tests:
        required: false
        type: boolean
      debug:
        required: false
        type: boolean
      verbose:
        required: false
        type: boolean

env:
  RUN_TESTS: ${{ inputs.run_tests }}
  DEBUG_CI: ${{ inputs.debug }}
  VERBOSE_CI: ${{ inputs.verbose }}
  PORTABLE_PYTHON_BUILDSYSTEM_BRANCH: ${{ inputs.buildsystem_branch || 'portable-python' }}
  image_map: '{"x86_64": "amd64/centos:7", "i386": "i386/centos:7", "aarch64": "arm64v8/centos:7", "arm": "arm32v7/debian:bullseye", "riscv64": "riscv64/debian:sid"}'
  freebsd_release_map: '{"14": "14.0", "13": "13.2"}'

jobs:
  build_linux:
    name: Linux ${{ inputs.python_version }} ${{ matrix.arch }}
    if: ${{ contains(inputs.platforms, 'linux') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, i386, aarch64, arm, riscv64]
        exclude:
          - arch: ${{ !contains(inputs.platforms, 'linux-x86_64') && 'x86_64' || '' }}
          - arch: ${{ !contains(inputs.platforms, 'linux-i386') && 'i386' || '' }}
          - arch: ${{ !contains(inputs.platforms, 'linux-aarch64') && 'aarch64' || '' }}
          - arch: ${{ !contains(inputs.platforms, 'linux-arm') && 'arm' || '' }}
          - arch: ${{ !contains(inputs.platforms, 'linux-riscv64') && 'riscv64' || '' }}

    steps:
      - name: Parse image
        id: parse_image
        run: |
          IMAGE=$(echo ${{ toJSON(env.image_map) }} | jq -r '.["${{ matrix.arch }}"]')
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Set up zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        run: |
          ./scripts/build_linux_zig.sh ${{ matrix.arch }} ${{ inputs.python_version }}

      - name: Interactive debugging
        if: ${{ always() && inputs.debug_interactive }}
        uses: fawazahmed0/action-debug@v2

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-linux-${{ matrix.arch }}-${{ inputs.python_version }}
          path: ./python*.zip

      - name: Upload artifacts
        if: ${{ always()  && inputs.debug }}
        uses: actions/upload-artifact@v4
        with:
          name: build-python-linux-${{ matrix.arch }}-${{ inputs.python_version }}
          path: ./*python*.tar.gz

      - name: Test python in clean environment
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.parse_image.outputs.image }}
          options: -v ${{ github.workspace }}:/work --workdir /tmp
          shell: bash
          run: |
            set -e
            uname -a

            if [ "${{ matrix.arch }}" == "arm" ] || [ "${{ matrix.arch }}" == "riscv64" ]; then
              apt update
              apt -y install unzip
            else
              yum -y install unzip
            fi

            cp /work/python*.zip .
            unzip ./python*.zip

            cd python-${{ inputs.python_version }}-linux-${{ matrix.arch }}
            chmod +x ./bin/python
            ldd -v -r ./bin/python
            ./bin/python --version
            ./bin/python -m sysconfig
            ./bin/python /work/scripts/test.py
            ./bin/pip3

            if [[ "${{ inputs.run_tests }}" == "true" ]]; then
              ./bin/python -m test -v -ulargefile,network,decimal,cpu,subprocess,urlfetch,tzdata --timeout 60
            fi

  build_windows:
    name: Windows ${{ inputs.python_version }} x86_64 (build)
    if: ${{ contains(inputs.platforms, 'windows') }}
    runs-on: windows-latest

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure build for x86_64
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Remove Strawberry
        shell: pwsh
        run: |
          Rename-Item c:\strawberry strawberry2

      - name: Build
        shell: bash
        run: |
          set -ex
          ./scripts/build_windows.sh x86_64 ${{ inputs.python_version }}

      - name: Interactive debugging
        uses: fawazahmed0/action-debug@v2
        if: ${{ always() && inputs.debug_interactive }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-windows-x86_64-${{ inputs.python_version }}
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() && inputs.debug }}
        with:
          name: build-python-windows-x86_64-${{ inputs.python_version }}
          path: ./*python*.tar.gz

  test_windows:
    name: Windows ${{ inputs.python_version }} x86_64 (test)
    needs: build_windows
    runs-on: windows-latest

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-windows-x86_64-${{ inputs.python_version }}
          path: ./python/

      - name: Test python in clean environment
        shell: bash
        run: |
          7z.exe x python/python-${{ inputs.python_version }}-windows-x86_64.zip

          cd python-${{ inputs.python_version }}-windows-x86_64
          ./bin/python --version
          ./bin/python -m sysconfig
          ./bin/python ../scripts/test.py

          if [[ "${{ inputs.run_tests }}" == "true" ]]; then
            ./bin/python -m test -v -ulargefile,network,decimal,cpu,subprocess,urlfetch,tzdata --timeout 60
          fi

  build_macos:
    name: MacOS ${{ inputs.python_version }} universal2 (build)
    if: ${{ contains(inputs.platforms, 'macos') }}
    runs-on: macos-12

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install coreutils
        run: brew install coreutils gpatch autoconf automake libtool

      - name: Build
        run: |
          set -ex
          ./scripts/build_macos.sh universal2 ${{ inputs.python_version }}

      - name: Interactive debugging
        uses: fawazahmed0/action-debug@v2
        if: ${{ always() && inputs.debug_interactive }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-darwin-universal2-${{ inputs.python_version }}
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() && inputs.debug }}
        with:
          name: build-python-darwin-universal2-${{ inputs.python_version }}
          path: ./*python*.tar.gz

  test_macos:
    name: MacOS ${{ inputs.python_version }} ${{ matrix.arch }} (test)
    needs: build_macos
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, macos-14 ]
        include:
          - os: macos-11
            arch: x86_64
          - os: macos-14
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-darwin-universal2-${{ inputs.python_version }}
          path: ./python/

      - name: Test python in clean environment
        shell: bash
        run: |
          unzip python/python-${{ inputs.python_version }}-darwin-universal2.zip

          cd python-${{ inputs.python_version }}-darwin-universal2
          chmod +x ./bin/python
          ./bin/python --version
          ./bin/python -m sysconfig
          ./bin/python ${{ github.workspace }}/scripts/test.py
          ./bin/pip3

          if [[ "${{ inputs.run_tests }}" == "true" ]]; then
            ./bin/python -m test -v -ulargefile,network,decimal,cpu,subprocess,urlfetch,tzdata --timeout 60
          fi

  build_freebsd:
    name: FreeBSD ${{ matrix.release }} ${{ inputs.python_version }} x86_64 (build)
    if: ${{ contains(inputs.platforms, 'freebsd') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        release: [13, 14]
        exclude:
          - release: ${{ !contains(inputs.platforms, 'freebsd13-x86_64') && '13' || '' }}
          - release: ${{ !contains(inputs.platforms, 'freebsd14-x86_64') && '14' || '' }}

    steps:
      - name: Parse release
        id: parse_release
        run: |
          RELEASE=$(echo ${{ toJSON(env.freebsd_release_map) }} | jq -r '.["${{ matrix.release }}"]')
          echo "release=$RELEASE" >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build in VM
        uses: vmactions/freebsd-vm@v1
        with:
          envs: 'RUN_TESTS DEBUG_CI VERBOSE_CI PORTABLE_PYTHON_BUILDSYSTEM_BRANCH'
          usesh: true
          release: ${{ steps.parse_release.outputs.release }}
          prepare: |
            pkg install -y cmake bash wget patch git zip python3 autoconf automake libtool gettext bison pkgconf gmake gperf patchelf
          run: |
            export PLATFORM=freebsd${{ matrix.release }}
            bash ./scripts/build_freebsd.sh x86_64 ${{ inputs.python_version }}

      - name: Interactive debugging
        if: ${{ always() && inputs.debug_interactive }}
        uses: fawazahmed0/action-debug@v2

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-freebsd${{ matrix.release }}-x86_64-${{ inputs.python_version }}
          path: ./python*.zip

      - name: Upload artifacts
        if: ${{ always() && inputs.debug }}
        uses: actions/upload-artifact@v4
        with:
          name: build-python-freebsd${{ matrix.release }}-x86_64-${{ inputs.python_version }}
          path: ./*python*.tar.gz

  test_freebsd:
    name: FreeBSD ${{ matrix.release }} ${{ inputs.python_version }} x86_64 (test)
    needs: build_freebsd
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        release: [13, 14]
        exclude:
          - release: ${{ !contains(inputs.platforms, 'freebsd13-x86_64') && '13' || '' }}
          - release: ${{ !contains(inputs.platforms, 'freebsd14-x86_64') && '14' || '' }}

    steps:
      - name: Parse release
        id: parse_release
        run: |
          RELEASE=$(echo ${{ toJSON(env.freebsd_release_map) }} | jq -r '.["${{ matrix.release }}"]')
          echo "release=$RELEASE" >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-freebsd${{ matrix.release }}-x86_64-${{ inputs.python_version }}
          path: ./python/

      - name: Test in VM
        uses: vmactions/freebsd-vm@v1
        with:
          envs: 'RUN_TESTS DEBUG_CI VERBOSE_CI PORTABLE_PYTHON_BUILDSYSTEM_BRANCH'
          usesh: true
          copyback: false
          release: ${{ steps.parse_release.outputs.release }}
          prepare: |
            pkg install -y bash
          run: |
            cat > /tmp/test.sh <<EOF
              unzip python/python-${{ inputs.python_version }}-freebsd${{ matrix.release }}-x86_64.zip

              cd python-${{ inputs.python_version }}-freebsd${{ matrix.release }}-x86_64
              chmod +x ./bin/python
              ./bin/python --version
              ./bin/python -m sysconfig
              ./bin/python ${{ github.workspace }}/scripts/test.py
              ./bin/pip3

              if [[ "${{ inputs.run_tests }}" == "true" ]]; then
                ./bin/python -m test -v -ulargefile,network,decimal,cpu,subprocess,urlfetch,tzdata --timeout 60
              fi
            EOF
            bash /tmp/test.sh