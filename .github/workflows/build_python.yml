name: Build Python

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
  workflow_call:
    inputs:
      python_version:
        required: true
        type: string

jobs:
  build_linux_zig:
    if: ${{ !startsWith(inputs.python_version, '3.8') }}
    name: Linux (Zig) ${{ inputs.python_version }} ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64, aarch64 ]
    uses: ./.github/workflows/build_python_linux_zig.yml
    with:
      python_version: ${{ inputs.python_version }}
      arch: ${{ matrix.arch }}

  build_linux_armv7l:
    if: ${{ !startsWith(inputs.python_version, '3.8') }}
    name: Linux (Docker) ${{ inputs.python_version }} armv7l
    uses: ./.github/workflows/build_python_linux.yml
    with:
      python_version: ${{ inputs.python_version }}
      arch: armv7l

  build_linux_3_8:
    if: ${{ startsWith(inputs.python_version, '3.8') }}
    name: Linux (Docker) ${{ inputs.python_version }} ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64, aarch64, armv7l ]
    uses: ./.github/workflows/build_python_linux.yml
    with:
      python_version: ${{ inputs.python_version }}
      arch: ${{ matrix.arch }}

  build_windows:
    name: Windows ${{ inputs.python_version }} x86_64 (build)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure build for x86_64
        uses: ilammy/msvc-dev-cmd@v1.12.1

      - name: Remove Strawberry
        shell: pwsh
        run: |
          Rename-Item c:\strawberry strawberry2

      - name: Build
        shell: bash
        run: |
          set -ex
          ./scripts/build_windows.sh x86_64 ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: build-python
          path: ./*python*.tar.gz

  test_windows:
    name: Windows ${{ inputs.python_version }} x86_64 (test)
    needs: build_windows
    runs-on: windows-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: python
          path: ./python/

      - name: Test python in clean environment
        shell: bash
        run: |
          7z.exe x python/python-${{ inputs.python_version }}-windows-x86_64.zip

          cd python-${{ inputs.python_version }}-windows-x86_64
          bin/python --version
          ./bin/python -c "import ssl"

          # make tests nonfatal for now
          # ./bin/python -m test || true

  build_macos:
    name: MacOS ${{ inputs.python_version }} universal2 (build)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: |
          set -ex
          ./scripts/build_macos.sh universal2 ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: build-python
          path: ./*python*.tar.gz

  test_macos:
    name: MacOS ${{ inputs.python_version }} universal2 (test)
    needs: build_macos
    runs-on: macos-11

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: python
          path: ./python/

      - name: Test python in clean environment
        shell: bash
        run: |
          unzip python/python-${{ inputs.python_version }}-darwin-universal2.zip

          cd python-${{ inputs.python_version }}-darwin-universal2
          chmod +x ./bin/python
          ./bin/python --version
          ./bin/python -c "import ssl"

          # make tests nonfatal for now
          # ./bin/python -m test || true
