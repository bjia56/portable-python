name: Build Python

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
  workflow_call:
    inputs:
      python_version:
        required: true
        type: string

env:
  image_map: '{"x86_64": "debian:buster", "aarch64": "debian:buster", "armv7l": "debian:buster"}'
  platform_map: '{"x86_64": "linux/amd64", "aarch64": "linux/arm64/v8", "armv7l": "linux/arm/v7"}'

jobs:
  build_linux:
    name: Linux ${{ inputs.python_version }} ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64, aarch64, armv7l ]

    steps:
      - name: Parse image
        id: parse_image
        run: |
          IMAGE=$(echo ${{ toJSON(env.image_map) }} | jq -r '.["${{ matrix.arch }}"]')
          echo "::set-output name=image::$IMAGE"

      - name: Parse platform
        id: parse_platform
        run: |
          PLATFORM=$(echo ${{ toJSON(env.platform_map) }} | jq -r '.["${{ matrix.arch }}"]')
          echo "::set-output name=platform::$PLATFORM"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: ${{ matrix.arch != 'x86_64' }}

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.parse_image.outputs.image }}
          options: -v ${{ github.workspace }}:/work --workdir /tmp --platform ${{ steps.parse_platform.outputs.platform }}
          run: |
            set -e
            /work/scripts/build_linux.sh ${{ matrix.arch }} ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: build-python
          path: ./*python*.tar.gz

      - name: Test python in clean environment
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.parse_image.outputs.image }}
          options: -v ${{ github.workspace }}:/work --workdir /tmp --platform ${{ steps.parse_platform.outputs.platform }}
          run: |
            set -e
            apt update
            apt install -y unzip

            cp /work/python*.zip .
            unzip ./python*.zip

            cd python-${{ inputs.python_version }}-linux-${{ matrix.arch }}
            chmod +x ./bin/python
            ldd -v -r ./bin/python || true
            ./bin/python --version

            # make tests nonfatal for now
            # ./bin/python -m test || true

  build_windows:
    name: Windows ${{ inputs.python_version }} x86_64 (build)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure build for x86_64
        uses: ilammy/msvc-dev-cmd@v1.12.1

      - name: Remove Strawberry
        shell: pwsh
        run: |
          Rename-Item c:\strawberry strawberry2

      - name: Build
        shell: bash
        run: |
          set -ex
          ./scripts/build_windows.sh x86_64 ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: build-python
          path: ./*python*.tar.gz

  test_windows:
    name: Windows ${{ inputs.python_version }} x86_64 (test)
    needs: build_windows
    runs-on: windows-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: python
          path: ./python/

      - name: Test python in clean environment
        shell: bash
        run: |
          7z.exe x python/python-${{ inputs.python_version }}-windows-x86_64.zip

          cd python-${{ inputs.python_version }}-windows-x86_64
          bin/python --version
          ./bin/python -c "import ssl"

          # make tests nonfatal for now
          # ./bin/python -m test || true

  build_macos:
    name: MacOS ${{ inputs.python_version }} universal2 (build)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: |
          set -ex
          ./scripts/build_macos.sh universal2 ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: build-python
          path: ./*python*.tar.gz

  test_macos:
    name: MacOS ${{ inputs.python_version }} universal2 (test)
    needs: build_macos
    runs-on: macos-11

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: python
          path: ./python/

      - name: Test python in clean environment
        shell: bash
        run: |
          unzip python/python-${{ inputs.python_version }}-darwin-universal2.zip

          cd python-${{ inputs.python_version }}-darwin-universal2
          chmod +x ./bin/python
          ./bin/python --version
          ./bin/python -c "import ssl"

          # make tests nonfatal for now
          # ./bin/python -m test || true
