name: Build Python

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
      run_tests:
        required: false
        type: boolean
      debug:
        required: false
        type: boolean
      verbose:
        required: false
        type: boolean
  workflow_call:
    inputs:
      python_version:
        required: true
        type: string
      run_tests:
        required: false
        type: boolean
      debug:
        required: false
        type: boolean
      verbose:
        required: false
        type: boolean

env:
  image_map: '{"x86_64": "centos:7", "aarch64": "centos:7", "arm": "debian:bullseye"}'
  platform_map: '{"x86_64": "linux/amd64", "aarch64": "linux/arm64/v8", "arm": "linux/arm/v7"}'
  RUN_TESTS: ${{ inputs.run_tests }}
  DEBUG_CI: ${{ inputs.debug }}
  VERBOSE_CI: ${{ inputs.verbose }}

jobs:
  build_linux:
    name: Linux ${{ inputs.python_version }} ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64, aarch64, arm ]

    steps:
      - name: Parse platform
        id: parse_platform
        run: |
          PLATFORM=$(echo ${{ toJSON(env.platform_map) }} | jq -r '.["${{ matrix.arch }}"]')
          echo "::set-output name=platform::$PLATFORM"

      - name: Parse image
        id: parse_image
        run: |
          IMAGE=$(echo ${{ toJSON(env.image_map) }} | jq -r '.["${{ matrix.arch }}"]')
          echo "::set-output name=image::$IMAGE"

      - name: Set up zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.12.0-dev.2341+92211135f

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        run: |
          ./scripts/build_linux_zig.sh ${{ matrix.arch }} ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-linux-${{ matrix.arch }}-${{ inputs.python_version }}
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() && inputs.debug }}
        with:
          name: build-python-linux-${{ matrix.arch }}-${{ inputs.python_version }}
          path: ./*python*.tar.gz

      - name: Test python in clean environment
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.parse_image.outputs.image }}
          options: -v ${{ github.workspace }}:/work --workdir /tmp --platform ${{ steps.parse_platform.outputs.platform }}
          shell: bash
          run: |
            set -e

            if [[ "${{ matrix.arch }}" == "arm" ]]; then
              apt update
              apt -y install unzip
            else
              yum -y install unzip
            fi

            cp /work/python*.zip .
            unzip ./python*.zip

            cd python-${{ inputs.python_version }}-linux-${{ matrix.arch }}
            chmod +x ./bin/python
            ldd -v -r ./bin/python
            ./bin/python --version
            ./bin/python -m sysconfig
            ./bin/python -c "import ssl"

            if [[ "${{ inputs.run_tests }}" == "true" ]]; then
              ./bin/python -m test -v -ulargefile,network,decimal,cpu,subprocess,urlfetch,tzdata
            fi

  build_windows:
    name: Windows ${{ inputs.python_version }} x86_64 (build)
    runs-on: windows-latest

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure build for x86_64
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Remove Strawberry
        shell: pwsh
        run: |
          Rename-Item c:\strawberry strawberry2

      - name: Build
        shell: bash
        run: |
          set -ex
          ./scripts/build_windows.sh x86_64 ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-windows-x86_64-${{ inputs.python_version }}
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() && inputs.debug }}
        with:
          name: build-python-windows-x86_64-${{ inputs.python_version }}
          path: ./*python*.tar.gz

  test_windows:
    name: Windows ${{ inputs.python_version }} x86_64 (test)
    needs: build_windows
    runs-on: windows-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-windows-x86_64-${{ inputs.python_version }}
          path: ./python/

      - name: Test python in clean environment
        shell: bash
        run: |
          7z.exe x python/python-${{ inputs.python_version }}-windows-x86_64.zip

          cd python-${{ inputs.python_version }}-windows-x86_64
          ./bin/python --version
          ./bin/python -m sysconfig
          ./bin/python -c "import ssl"

          if [[ "${{ inputs.run_tests }}" == "true" ]]; then
            ./bin/python -m test -v -ulargefile,network,decimal,cpu,subprocess,urlfetch,tzdata
          fi

  build_macos:
    name: MacOS ${{ inputs.python_version }} universal2 (build)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install coreutils
        run: brew install coreutils

      - name: Build
        run: |
          set -ex
          ./scripts/build_macos.sh universal2 ${{ inputs.python_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-darwin-universal2-${{ inputs.python_version }}
          path: ./python*.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() && inputs.debug }}
        with:
          name: build-python-darwin-universal2-${{ inputs.python_version }}
          path: ./*python*.tar.gz

  test_macos:
    name: MacOS ${{ inputs.python_version }} ${{ matrix.arch }} (test)
    needs: build_macos
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, macos-14 ]
        include:
          - os: macos-11
            arch: x86_64
          - os: macos-14
            arch: arm64

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-darwin-universal2-${{ inputs.python_version }}
          path: ./python/

      - name: Test python in clean environment
        shell: bash
        run: |
          unzip python/python-${{ inputs.python_version }}-darwin-universal2.zip

          cd python-${{ inputs.python_version }}-darwin-universal2
          chmod +x ./bin/python
          ./bin/python --version
          ./bin/python -m sysconfig
          ./bin/python -c "import ssl"

          if [[ "${{ inputs.run_tests }}" == "true" ]]; then
            ./bin/python -m test -v -ulargefile,network,decimal,cpu,subprocess,urlfetch,tzdata
          fi
